Configuraci√≥n del entorno de desarrollo
‚†Ä‚†Ä‚†Ä‚†Ä
Hola!, les dejo las definiciones de los siguientes conceptos para reafirmar las bases que ya tenemos sobre el desarrollo. üòÅ
‚†Ä‚†Ä‚†Ä‚†Ä
Git Ignore:
‚†Ä‚†Ä‚†Ä‚†Ä
Son archivos ignorados que suelen ser artefactos de compilaci√≥n y archivos generados por el equipo que pueden derivarse de tu fuente de repositorios o que no deber√≠an confirmarse por alg√∫n otro motivo. Ejemplo: node_modules.

Linters:
‚†Ä‚†Ä‚†Ä‚†Ä
Herramientas que realizan la lectura del c√≥digo fuente

Detectan errores/warnings de c√≥digo
Variables sin usar o no definida, llave sin cerrar‚Ä¶
‚†Ä‚†Ä‚†Ä‚†Ä
Nodemon:
‚†Ä‚†Ä‚†Ä‚†Ä
Es una herramienta que ayuda a desarrollar aplicaciones en Node.js al reiniciar la aplicaci√≥n aut√≥maticamente cuando hay cambios en el archivo.
‚†Ä‚†Ä‚†Ä‚†Ä
gitignore.io:
‚†Ä‚†Ä‚†Ä‚†Ä
Contiene la configuraci√≥n del entorno que espec√≠fiques
‚†Ä‚†Ä‚†Ä‚†Ä
Editor Config:
‚†Ä‚†Ä‚†Ä‚†Ä
Todos los desarrolladores tendr√°n la misma configuraci√≥n del proyecto.

Que son los Middlewares:
Un middleware es un bloque de c√≥digo que se ejecuta entre la petici√≥n que hace el usuario (request) hasta que la petici√≥n llega al servidor.

function(req, res, next) {
	if(error){
		res.status(500).json({error});
	}else{
		next();
}

function(error, req, res, next) {
	if(algo){
		res.send('end');
	}else{
		next();
}

Casos de uso:
Funcionan como pipes
Validar datos
Capturar errores
Validar permisos controlar accesos

## ****Consideraciones para producci√≥n****

Un breve resumen de las consideraciones para producci√≥n:

- Cors: Que acceso y a quienes le damos acceso para hacer solicitudes
- Https: Que la API esta sobre servidor de HTTPS
- Procesos de Build: Se ve en procesos que cosas que tiene procesar informaci√≥n (typescript)
- Remover logs: No es bueno tener logs, a veces esto tiene demoras, existen mejor formas para capturar logs.
- Seguridad (helmet): Muy importante la seguridad y para esto se recomienda helmt que es una colecci√≥n de Middleware que colocan capas de segridad a la aplicaci√≥n
- Testing: Correr prebas unitarias o de integraci√≥n antes de salir de producci√≥n


https://legendary-creator-67a.notion.site/Curso-de-Backend-con-NodeJS-API-REST-con-Express-js-1b9c3d560cf648e7ab395f05ba2aa1d4